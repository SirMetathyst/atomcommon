// Package atomkit ...
// Generated by the atom tool.  DO NOT EDIT!
// Source: atom_CreateWindow
package atomkit

import (
	"github.com/SirMetathyst/atom"

)

// CreateWindowKey ...
const CreateWindowKey uint = 2363924133

// CreateWindowData ...
type CreateWindowData struct {
	Title string	
}

// CreateWindowComponent ...
type CreateWindowComponent struct {
	context atom.Context
	data map[atom.EntityID]CreateWindowData
}

// NewCreateWindowComponent ...
func NewCreateWindowComponent() *CreateWindowComponent {
	return &CreateWindowComponent{
		data: make(map[atom.EntityID]CreateWindowData),
	}
}

// SetContext ...
func (c *CreateWindowComponent) SetContext(ctx atom.Context) {
	if c.context == nil {
		c.context = ctx
	}
}

func init() {
	x := NewCreateWindowComponent()
	context := atom.Default().RegisterComponent(CreateWindowKey, x)
	x.SetContext(context)
}

// DeleteEntity ...
func (c *CreateWindowComponent) DeleteEntity(id atom.EntityID) {
	delete(c.data, id)
}

// HasEntity ...
func (c *CreateWindowComponent) HasEntity(id atom.EntityID) bool {
	_, ok := c.data[id]
	return ok
}

// SetCreateWindow ...
func (c *CreateWindowComponent) SetCreateWindow(id atom.EntityID, createwindow CreateWindowData) {
	if c.context.HasEntity(id) {
		if c.HasEntity(id) {
			c.data[id] = createwindow
			c.context.ComponentUpdated(CreateWindowKey, id)
		} else {
			c.data[id] = createwindow
			c.context.ComponentAdded(CreateWindowKey, id)
		}
	}
}

// CreateWindow ...
func (c *CreateWindowComponent) CreateWindow(id atom.EntityID) CreateWindowData {
	return c.data[id]
}

// DeleteCreateWindow ...
func (c *CreateWindowComponent) DeleteCreateWindow(id atom.EntityID) {
	delete(c.data, id)
	c.context.ComponentDeleted(CreateWindowKey, id)
}

// SetCreateWindowX ...
func SetCreateWindowX(e *atom.EntityManager, id atom.EntityID, createwindow CreateWindowData) {
	v, _ := e.Component(CreateWindowKey)
	c := v.(*CreateWindowComponent)
	c.SetCreateWindow(id, createwindow)
}

// SetCreateWindow ...
func SetCreateWindow(id atom.EntityID, createwindow CreateWindowData) {
	SetCreateWindowX(atom.Default(), id, createwindow)
}

// CreateWindowX ...
func CreateWindowX(e *atom.EntityManager, id atom.EntityID) CreateWindowData {
	v, _ := e.Component(CreateWindowKey)
	c := v.(*CreateWindowComponent)
	return c.CreateWindow(id)
}

// CreateWindow ...
func CreateWindow(id atom.EntityID) CreateWindowData {
	return CreateWindowX(atom.Default(), id)
}

// DeleteCreateWindowX ...
func DeleteCreateWindowX(e *atom.EntityManager, id atom.EntityID) {
	v, _ := e.Component(CreateWindowKey)
	c := v.(*CreateWindowComponent)
	c.DeleteCreateWindow(id)
}

// DeleteCreateWindow ...
func DeleteCreateWindow(id atom.EntityID) {
	DeleteCreateWindowX(atom.Default(), id)
}

// HasCreateWindowX ...
func HasCreateWindowX(e *atom.EntityManager, id atom.EntityID) bool {
	v, _ := e.Component(CreateWindowKey)
	return v.HasEntity(id)
}

// HasCreateWindow ...
func HasCreateWindow(id atom.EntityID) bool {
	return HasCreateWindowX(atom.Default(), id)
}