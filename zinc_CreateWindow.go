// Package zinckit ...
// Generated by the zinc tool.  DO NOT EDIT!
// Source: zinc_CreateWindow
package zinckit

import (
	"github.com/SirMetathyst/zinc"

)

// CreateWindowKey ...
const CreateWindowKey uint = 2363924133

// CreateWindowData ...
type CreateWindowData struct {
	Title string	
}

// CreateWindowComponent ...
type CreateWindowComponent struct {
	ctx zinc.CTX
	data map[zinc.EntityID]CreateWindowData
}

// NewCreateWindowComponent ...
func NewCreateWindowComponent() *CreateWindowComponent {
	return &CreateWindowComponent{
		data: make(map[zinc.EntityID]CreateWindowData),
	}
}

// SetContext ...
func (c *CreateWindowComponent) SetContext(ctx zinc.CTX) {
	if c.ctx == nil {
		c.ctx = ctx
	}
}

func init() {
	x := NewCreateWindowComponent()
	ctx := zinc.Default().RegisterComponent(CreateWindowKey, x)
	x.SetContext(ctx)
}

// DeleteEntity ...
func (c *CreateWindowComponent) DeleteEntity(id zinc.EntityID) {
	delete(c.data, id)
}

// HasEntity ...
func (c *CreateWindowComponent) HasEntity(id zinc.EntityID) bool {
	_, ok := c.data[id]
	return ok
}

// SetCreateWindow ...
func (c *CreateWindowComponent) SetCreateWindow(id zinc.EntityID, createwindow CreateWindowData) {
	if c.ctx.HasEntity(id) {
		if c.HasEntity(id) {
			c.data[id] = createwindow
			c.ctx.ComponentUpdated(CreateWindowKey, id)
		} else {
			c.data[id] = createwindow
			c.ctx.ComponentAdded(CreateWindowKey, id)
		}
	}
}

// CreateWindow ...
func (c *CreateWindowComponent) CreateWindow(id zinc.EntityID) CreateWindowData {
	return c.data[id]
}

// DeleteCreateWindow ...
func (c *CreateWindowComponent) DeleteCreateWindow(id zinc.EntityID) {
	delete(c.data, id)
	c.ctx.ComponentDeleted(CreateWindowKey, id)
}

// SetCreateWindowX ...
func SetCreateWindowX(e *zinc.EntityManager, id zinc.EntityID, createwindow CreateWindowData) {
	v, _ := e.Component(CreateWindowKey)
	c := v.(*CreateWindowComponent)
	c.SetCreateWindow(id, createwindow)
}

// SetCreateWindow ...
func SetCreateWindow(id zinc.EntityID, createwindow CreateWindowData) {
	SetCreateWindowX(zinc.Default(), id, createwindow)
}

// CreateWindowX ...
func CreateWindowX(e *zinc.EntityManager, id zinc.EntityID) CreateWindowData {
	v, _ := e.Component(CreateWindowKey)
	c := v.(*CreateWindowComponent)
	return c.CreateWindow(id)
}

// CreateWindow ...
func CreateWindow(id zinc.EntityID) CreateWindowData {
	return CreateWindowX(zinc.Default(), id)
}

// DeleteCreateWindowX ...
func DeleteCreateWindowX(e *zinc.EntityManager, id zinc.EntityID) {
	v, _ := e.Component(CreateWindowKey)
	c := v.(*CreateWindowComponent)
	c.DeleteCreateWindow(id)
}

// DeleteCreateWindow ...
func DeleteCreateWindow(id zinc.EntityID) {
	DeleteCreateWindowX(zinc.Default(), id)
}

// HasCreateWindowX ...
func HasCreateWindowX(e *zinc.EntityManager, id zinc.EntityID) bool {
	v, _ := e.Component(CreateWindowKey)
	return v.HasEntity(id)
}

// HasCreateWindow ...
func HasCreateWindow(id zinc.EntityID) bool {
	return HasCreateWindowX(zinc.Default(), id)
}